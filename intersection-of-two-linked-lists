# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None
    
        cur_A = headA
        cur_B = headB
        
        while cur_A != cur_B:
            cur_A = cur_A.next if cur_A else headB
            cur_B = cur_B.next if cur_B else headA
        
        return cur_A
        
    def getIntersectionNode2(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None

        len_a = self.get_head_len(headA)
        len_b = self.get_head_len(headB)

        shift = abs(len_a - len_b)

        if len_a > len_b:
            headB = self.add_n_nodes_to_beginning(headB, shift)
        else:
            headA = self.add_n_nodes_to_beginning(headA, shift)

        while headA:
            if headA == headB:
                return headA

            headA = headA.next
            headB = headB.next

    def get_head_len(self, head):
        len_ = 0

        while head:
            len_ += 1
            head = head.next

        return len_

    def add_n_nodes_to_beginning(self, head, n):
        for _ in range(n):
            tmp = ListNode(0)

            tmp.next = head
            head = tmp

        return head
